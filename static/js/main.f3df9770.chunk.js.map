{"version":3,"sources":["services/constants.js","contexts/auth.js","pages/Login/index.js","pages/ListaPartite/index.js","pages/Home/index.js","pages/Dettaglio/index.js","pages/NuovaPartita/index.js","components/PrivateRoute/index.js","pages/Admin/index.js","App.js","serviceWorker.js","index.js"],"names":["BASEURL","AuthContext","createContext","useAuth","useContext","Login","props","useState","localStorage","getItem","username","setUsername","password","setPassword","isLoggedIn","setLoggedIn","isError","setIsError","setAuthToken","ricorda","setRicorda","referer","location","state","to","Container","Row","Col","Form","Group","controlId","Label","Control","autoComplete","name","onChange","handleChange","type","placeholder","value","required","Check","label","Button","variant","onClick","event","preventDefault","setItem","axios","post","sha1","headers","then","result","status","console","log","data","catch","e","Alert","target","checked","ListaPartite","Home","Dettaglio","NuovaPartita","PrivateRoute","Component","component","rest","authToken","render","pathname","Admin","App","existingToken","Provider","JSON","stringify","removeItem","basename","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","exact","path","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"+SAAaA,EAAU,iD,iBCEVC,EAAcC,0BAEpB,SAASC,IACZ,OAAOC,qBAAWH,G,WCwHPI,MApHf,SAAeC,GAAQ,IAAD,EACcC,mBAASC,aAAaC,QAAQ,MAD5C,mBACXC,EADW,KACDC,EADC,OAEcJ,mBAASC,aAAaC,QAAQ,MAF5C,mBAEXG,EAFW,KAEDC,EAFC,OAGgBN,oBAAS,GAHzB,mBAGXO,EAHW,KAGCC,EAHD,OAIYR,oBAAS,GAJrB,mBAIXS,EAJW,KAIFC,EAJE,KAKXC,EAAgBf,IAAhBe,aALW,EAMYX,oBAAS,GANrB,mBAMXY,EANW,KAMFC,EANE,KAQZC,EAAUf,EAAMgB,SAASC,MAAMF,SAAW,IAEhD,OAAIP,EACO,kBAAC,IAAD,CAAUU,GAAIH,IAIrB,kBAACI,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,qBAClB,kBAACF,EAAA,EAAKG,MAAN,iBACA,kBAACH,EAAA,EAAKI,QAAN,CACIC,aAAa,WACbC,KAAK,WACLC,SAAUC,EACVC,KAAK,OACLC,YAAY,qBACZC,MAAO7B,GAAsB,GAC7B8B,UAAQ,KAGhB,kBAACZ,EAAA,EAAKC,MAAN,CAAYC,UAAU,qBAClB,kBAACF,EAAA,EAAKG,MAAN,iBACA,kBAACH,EAAA,EAAKI,QAAN,CACIC,aAAa,mBACbC,KAAK,WACLC,SAAUC,EACVC,KAAK,WACLC,YAAY,WACZC,MAAO3B,GAAsB,GAE7B4B,UAAQ,KAGhB,kBAACZ,EAAA,EAAKC,MAAN,CAAYC,UAAU,qBAClB,kBAACF,EAAA,EAAKa,MAAN,CACIP,KAAK,UACLC,SAAUC,EACVC,KAAK,WACLK,MAAM,eAGd,kBAACC,EAAA,EAAD,CAAQN,KAAK,SAASE,MAAM,SAASK,QAAQ,kBACrCC,QAU5B,SAAqBC,GACbpC,GAAYE,IACZkC,EAAMC,iBACF5B,IACAX,aAAawC,QAAQ,IAAKtC,GAC1BF,aAAawC,QAAQ,IAAKpC,IAE9BqC,IAAMC,KACFlD,EAAU,kBACV,CACIU,SAAUA,EACVE,SAAUuC,IAAKvC,IAEnB,CACIwC,QAAS,CAAC,eAAgB,sBAG7BC,MAAK,SAAAC,GACoB,MAAlBA,EAAOC,QACPC,QAAQC,IAAIH,EAAOI,MACnBxC,EAAaoC,EAAOI,MACpB3C,GAAY,KAEZyC,QAAQC,IAAIH,EAAOI,KAAP,SACZzC,GAAW,OAEhB0C,OAAM,SAAAC,GACTJ,QAAQC,IAAIG,GACZ3C,GAAW,SAvCH,YAKZ,kBAACS,EAAA,EAAD,KACKV,GAAW,kBAAC6C,EAAA,EAAD,CAAOjB,QAAQ,UAAf,kCAsCxB,SAASR,EAAaU,GAClB,IAAMgB,EAAShB,EAAMgB,OACfvB,EAAwB,aAAhBuB,EAAOzB,KAAsByB,EAAOC,QAAUD,EAAOvB,MAEnE,OADauB,EAAO5B,MAEhB,IAAK,WACDvB,EAAY4B,GACZ,MACJ,IAAK,WACD1B,EAAY0B,GACZ,MACJ,IAAK,UACDnB,EAAWmB,MC5GZyB,MANf,WACI,OAAQ,kBAACvC,EAAA,EAAD,KACJ,8CCSOwC,MATf,WACI,OACI,kBAACxC,EAAA,EAAD,KACI,oCACA,kBAAC,EAAD,Q,QCHGyC,MAJf,WACI,OAAO,0CCGIC,MAJf,WACI,OAAO,6C,QCkBIC,MAjBf,YAAwD,IAAtBC,EAAqB,EAAhCC,UAAyBC,EAAO,6BAC5CC,EAAarE,IAAbqE,UACP,OACI,kBAAC,IAAD,iBACQD,EADR,CAEIE,OACI,SAAAnE,GAAK,OACDkE,EACM,kBAACH,EAAc/D,GACf,kBAAC,IAAD,CAAUkB,GACR,CAACkD,SAAU,SAAUnD,MAAO,CAAEF,QAASf,EAAMgB,kBCO1DqD,MAhBf,SAAerE,GAAQ,IACXY,EAAiBf,IAAjBe,aAMR,OACI,kBAACO,EAAA,EAAD,KACI,qDACA,kBAAC,IAAD,CAAMD,GAAG,cAAT,qBACA,kBAACmB,EAAA,EAAD,CAAQC,QAAQ,iBAAiBC,QARzC,WACI3B,MAOI,U,gBCsCG0D,MAzCf,WAEI,IAAMC,EAAgBrE,aAAaC,QAAQ,SAFhC,EAGuBF,mBAASsE,GAHhC,mBAGJL,EAHI,KAGOtD,EAHP,KAeX,OACI,kBAACjB,EAAY6E,SAAb,CAAsBvC,MAAO,CAAEiC,YAAWtD,aAX7B,SAACwC,GACVA,GACAlD,aAAawC,QAAQ,QAAS+B,KAAKC,UAAUtB,IAC7CxC,EAAawC,KAEblD,aAAayE,WAAW,SACxB/D,GAAa,OAMb,kBAAC,IAAD,CAAQgE,SAAUlF,GAEd,kBAACmF,EAAA,EAAD,CAAQC,GAAG,UAAUC,OAAO,MACxB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,KAAnB,mBACA,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBC,GAAG,oBAChB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACX,kBAACD,EAAA,EAAIE,KAAL,CAAUP,KAAK,KAAf,QACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAK,UAAf,YAKZ,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,IAAI1B,UAAWL,IACjC,kBAAC,IAAD,CAAO+B,KAAK,SAAS1B,UAAWN,IAChC,kBAAC,IAAD,CAAOgC,KAAK,SAAS1B,UAAWjE,IAChC,kBAAC,EAAD,CAAc2F,KAAK,SAAS1B,UAAWK,IACvC,kBAAC,EAAD,CAAcqB,KAAK,aAAa1B,UAAWJ,IAC3C,kBAAC,EAAD,CAAc8B,KAAK,aAAa1B,UAAWH,OCpCrD8B,EAAcC,QACW,cAA7BC,OAAO7E,SAAS8E,UAEe,UAA7BD,OAAO7E,SAAS8E,UAEhBD,OAAO7E,SAAS8E,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTlD,MAAK,SAAAuD,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBvF,QACfkF,UAAUC,cAAcO,YAI1BzD,QAAQC,IACN,iHAKE+C,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBpD,QAAQC,IAAI,sCAGR+C,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5BjD,OAAM,SAAAyD,GACL5D,QAAQ4D,MAAM,4CAA6CA,M,MCvFjEC,IAAS5C,OACP,kBAAC,IAAM6C,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDSnB,SAAkBhB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIgB,IAAIC,mBAAwBvB,OAAO7E,SAASiE,MACpDoC,SAAWxB,OAAO7E,SAASqG,OAIvC,OAGFxB,OAAOyB,iBAAiB,QAAQ,WAC9B,IAAMrB,EAAK,UAAMmB,mBAAN,sBAEPzB,IAgEV,SAAiCM,EAAOC,GAEtCqB,MAAMtB,EAAO,CACXnD,QAAS,CAAE,iBAAkB,YAE5BC,MAAK,SAAAyE,GAEJ,IAAMC,EAAcD,EAAS1E,QAAQ4E,IAAI,gBAEnB,MAApBF,EAASvE,QACO,MAAfwE,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5CxB,UAAUC,cAAcwB,MAAM7E,MAAK,SAAAuD,GACjCA,EAAauB,aAAa9E,MAAK,WAC7B8C,OAAO7E,SAAS8G,eAKpB9B,EAAgBC,EAAOC,MAG1B7C,OAAM,WACLH,QAAQC,IACN,oEAvFA4E,CAAwB9B,EAAOC,GAI/BC,UAAUC,cAAcwB,MAAM7E,MAAK,WACjCG,QAAQC,IACN,iHAMJ6C,EAAgBC,EAAOC,OC/B/BE,K","file":"static/js/main.f3df9770.chunk.js","sourcesContent":["export const BASEURL = 'https://dariocast.altervista.org/fantazama/api';\n","import { createContext, useContext } from 'react';\n\nexport const AuthContext = createContext();\n\nexport function useAuth() {\n    return useContext(AuthContext);\n}\n","import React, {useState} from \"react\";\nimport {Alert, Button, Col, Container, Form, Row} from \"react-bootstrap\";\nimport sha1 from 'js-sha1'\nimport {BASEURL} from \"../../services/constants\";\nimport axios from \"axios\";\nimport {useAuth} from \"../../contexts/auth\";\nimport {Redirect} from \"react-router-dom\";\n\n\nfunction Login(props) {\n    const [username, setUsername] = useState(localStorage.getItem('u'));\n    const [password, setPassword] = useState(localStorage.getItem('p'));\n    const [isLoggedIn, setLoggedIn] = useState(false);\n    const [isError, setIsError] = useState(false);\n    const {setAuthToken} = useAuth();\n    const [ricorda, setRicorda] = useState(false);\n\n    const referer = props.location.state.referer || '/';\n\n    if (isLoggedIn) {\n        return <Redirect to={referer}/>;\n    }\n\n    return (\n        <Container>\n            <Row>\n                <Col>\n                    <Form>\n                        <Form.Group controlId=\"formBasicUsername\">\n                            <Form.Label>Username</Form.Label>\n                            <Form.Control\n                                autoComplete=\"username\"\n                                name=\"username\"\n                                onChange={handleChange}\n                                type=\"text\"\n                                placeholder=\"Inserisci username\"\n                                value={username ? username : ''}\n                                required\n                            />\n                        </Form.Group>\n                        <Form.Group controlId=\"formBasicPassword\">\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control\n                                autoComplete=\"current-password\"\n                                name=\"password\"\n                                onChange={handleChange}\n                                type=\"password\"\n                                placeholder=\"Password\"\n                                value={password ? password : ''}\n\n                                required\n                            />\n                        </Form.Group>\n                        <Form.Group controlId=\"formBasicCheckbox\">\n                            <Form.Check\n                                name=\"ricorda\"\n                                onChange={handleChange}\n                                type=\"checkbox\"\n                                label=\"Ricordami\"\n                            />\n                        </Form.Group>\n                        <Button type=\"submit\" value=\"Submit\" variant=\"outline-primary\"\n                                onClick={handleLogin}>Login</Button>\n                    </Form>\n                </Col>\n            </Row>\n            <Row>\n                {isError && <Alert variant=\"danger\">Username e/o password errati</Alert>}\n            </Row>\n        </Container>\n    );\n\n    function handleLogin(event) {\n        if (username && password) {\n            event.preventDefault();\n            if (ricorda) {\n                localStorage.setItem('u', username);\n                localStorage.setItem('p', password);\n            }\n            axios.post(\n                BASEURL + \"/admin/auth.php\",\n                {\n                    username: username,\n                    password: sha1(password)\n                },\n                {\n                    headers: {'Content-Type': 'application/json'}\n                }\n            )\n                .then(result => {\n                    if (result.status === 200) {\n                        console.log(result.data);\n                        setAuthToken(result.data);\n                        setLoggedIn(true);\n                    } else {\n                        console.log(result.data['message']);\n                        setIsError(true);\n                    }\n                }).catch(e => {\n                console.log(e);\n                setIsError(true);\n            });\n        }\n    }\n\n    function handleChange(event) {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        switch (name) {\n            case 'username':\n                setUsername(value);\n                break;\n            case 'password':\n                setPassword(value);\n                break;\n            case 'ricorda':\n                setRicorda(value);\n                break;\n            default:\n                break;\n        }\n    }\n}\n\nexport default Login;\n","import React from \"react\";\nimport {Container} from \"react-bootstrap\";\n\nfunction ListaPartite() {\n    return (<Container>\n        <h2>ListaPartite</h2>\n    </Container>);\n}\n\nexport default ListaPartite;\n","import React from \"react\";\nimport ListaPartite from \"../ListaPartite\";\nimport {Container} from \"react-bootstrap\";\n\n\nfunction Home() {\n    return (\n        <Container>\n            <h1>Home</h1>\n            <ListaPartite />\n        </Container>\n    );\n}\n\nexport default Home;\n","import React from \"react\";\n\nfunction Dettaglio() {\n    return <h1>Dettaglio</h1>;\n}\n\nexport default Dettaglio;\n","import React from \"react\";\n\nfunction NuovaPartita() {\n    return <h1>NuovaPartita</h1>;\n}\n\nexport default NuovaPartita;\n","import React from \"react\";\nimport {Route, Redirect} from \"react-router-dom\";\nimport {useAuth} from \"../../contexts/auth\";\n\nfunction PrivateRoute({component: Component, ...rest}) {\n    const {authToken} = useAuth();\n    return (\n        <Route\n            {...rest}\n            render={\n                props =>\n                    authToken\n                        ? <Component {...props} />\n                        : <Redirect to={\n                            {pathname: \"/login\", state: { referer: props.location }}\n                        }/>\n            }\n        />\n    );\n}\n\nexport default PrivateRoute;\n","import React from \"react\";\nimport {useAuth} from \"../../contexts/auth\";\nimport {Button, Container} from \"react-bootstrap\";\nimport {Link} from \"react-router-dom\";\n\nfunction Admin(props) {\n    const { setAuthToken } = useAuth();\n\n    function logout() {\n        setAuthToken();\n    }\n\n    return (\n        <Container>\n            <h3>Pannello di controllo</h3>\n            <Link to=\"/inserisci\">Inserisci partita</Link>\n            <Button variant=\"outline-danger\" onClick={logout}>Esci</Button>\n        </Container>\n    );\n}\n\nexport default Admin;\n","import React, {useState} from 'react';\nimport Login from \"./pages/Login\";\nimport Home from \"./pages/Home\";\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport Dettaglio from \"./pages/Dettaglio\";\nimport NuovaPartita from \"./pages/NuovaPartita\";\nimport ListaPartite from \"./pages/ListaPartite\";\nimport PrivateRoute from \"./components/PrivateRoute\";\nimport {AuthContext} from \"./contexts/auth\";\nimport Admin from \"./pages/Admin\";\nimport {Nav, Navbar} from \"react-bootstrap\";\nimport {BASEURL} from \"./services/constants\";\n\nfunction App() {\n\n    const existingToken = localStorage.getItem(\"token\");\n    const [authToken, setAuthToken] = useState(existingToken);\n\n    const setToken = (data) => {\n        if (data) {\n            localStorage.setItem(\"token\", JSON.stringify(data));\n            setAuthToken(data);\n        } else {\n            localStorage.removeItem(\"token\");\n            setAuthToken(false);\n        }\n    };\n\n    return (\n        <AuthContext.Provider value={{ authToken, setAuthToken:setToken }}>\n            <Router basename={BASEURL}>\n\n                <Navbar bg=\"success\" expand=\"lg\">\n                    <Navbar.Brand href=\"/\">Quaderno Torneo</Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav className=\"mr-auto\">\n                            <Nav.Link href=\"/\">Home</Nav.Link>\n                            <Nav.Link href=\"/admin\">Admin</Nav.Link>\n                        </Nav>\n                    </Navbar.Collapse>\n                </Navbar>\n\n                <Route exact path=\"/\" component={Home}/>\n                <Route path=\"/lista\" component={ListaPartite}/>\n                <Route path=\"/login\" component={Login}/>\n                <PrivateRoute path=\"/admin\" component={Admin}/>\n                <PrivateRoute path=\"/dettaglio\" component={Dettaglio}/>\n                <PrivateRoute path=\"/inserisci\" component={NuovaPartita}/>\n            </Router>\n        </AuthContext.Provider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}