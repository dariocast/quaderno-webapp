{"version":3,"sources":["contexts/auth.js","pages/Login/index.js","pages/Home/index.js","components/QTJumbo/qt-jumbo.js","pages/Dettaglio/index.js","pages/NuovaPartita/index.js","pages/ListaPartite/index.js","components/PrivateRoute/index.js","App.js","serviceWorker.js","index.js"],"names":["AuthContext","createContext","useAuth","useContext","Login","useState","localStorage","getItem","username","setUsername","password","setPassword","isLoggedIn","setLoggedIn","isError","setIsError","setAuthTokens","ricorda","setRicorda","to","Container","Row","Col","Form","Group","controlId","Label","Control","autoComplete","name","onChange","handleChange","type","placeholder","value","required","Check","label","Button","variant","onClick","event","preventDefault","setItem","pwdHashed","sha1","axios","post","BASEURL","then","result","status","console","log","data","catch","e","Alert","target","checked","Home","QTJumbo","props","Jumbotron","fluid","className","title","Dettaglio","NuovaPartita","ListaPartite","PrivateRoute","Component","component","rest","isAuthenticated","render","App","existingToken","JSON","parse","authToken","setAuthToken","Provider","stringify","exact","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ReactDOM","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fcc47d25.chunk.js","sourcesContent":["import { createContext, useContext } from 'react';\n\nexport const AuthContext = createContext();\n\nexport function useAuth() {\n    return useContext(AuthContext);\n}\n","import React, {useState} from \"react\";\nimport { Button, Container, Row, Col, Form, Alert} from \"react-bootstrap\";\nimport sha1 from 'js-sha1'\nimport {BASEURL} from \"../../services/constants\";\nimport axios from \"axios\";\nimport {useAuth} from \"../../contexts/auth\";\nimport {Redirect} from \"react-router-dom\";\n\n\n\nfunction Login() {\n    const [username, setUsername] = useState(localStorage.getItem('u'));\n    const [password, setPassword] = useState(localStorage.getItem('p'));\n    const [isLoggedIn, setLoggedIn] = useState(false);\n    const [isError, setIsError] = useState(false);\n    const { setAuthTokens } = useAuth();\n    const [ricorda, setRicorda] = useState(false);\n\n    if (isLoggedIn) {\n        return <Redirect to=\"/\" />;\n    }\n\n    return (\n        <Container>\n            <Row>\n                <Col>\n                    <Form>\n                        <Form.Group controlId=\"formBasicUsername\">\n                            <Form.Label>Username</Form.Label>\n                            <Form.Control\n                                autoComplete=\"username\"\n                                name=\"username\"\n                                onChange={handleChange}\n                                type=\"text\"\n                                placeholder=\"Inserisci username\"\n                                value={username ? username : ''}\n                                required\n                            />\n                        </Form.Group>\n                        <Form.Group controlId=\"formBasicPassword\">\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control\n                                autoComplete=\"current-password\"\n                                name=\"password\"\n                                onChange={handleChange}\n                                type=\"password\"\n                                placeholder=\"Password\"\n                                value={password ? password : ''}\n                                required\n                            />\n                        </Form.Group>\n                        <Form.Group controlId=\"formBasicCheckbox\">\n                            <Form.Check\n                                name=\"ricorda\"\n                                onChange={handleChange}\n                                type=\"checkbox\"\n                                label=\"Ricordami\"\n                            />\n                        </Form.Group>\n                        <Button type=\"submit\" value=\"Submit\" variant=\"outline-primary\" onClick={handleLogin}>Login</Button>\n                    </Form>\n                </Col>\n            </Row>\n            <Row>\n                { isError && <Alert variant=\"danger\">Username e/o password errati</Alert> }\n            </Row>\n        </Container>\n    );\n\n    function handleLogin(event) {\n        if (username && password) {\n            event.preventDefault();\n            if (ricorda) {\n                localStorage.setItem('u', username);\n                localStorage.setItem('p', password);\n            }\n            const pwdHashed = sha1(password);\n            axios.post(BASEURL+\"/admin/auth.php\",{\n                username,\n                pwdHashed\n            }).then(result => {\n                if (result.status === 200) {\n                    console.log(result.data);\n                    setAuthTokens(result.data);\n                    setLoggedIn(true);\n                } else {\n                    console.log(\"error\");\n                    setIsError(true);\n                }\n            }).catch(e => {\n                setIsError(true);\n            });\n        }\n    }\n\n    function handleChange(event) {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        switch (name) {\n            case 'username':\n                setUsername(value);\n                break;\n            case 'password':\n                setPassword(value);\n                break;\n            case 'ricorda':\n                setRicorda(value);\n                break;\n            default:\n                break;\n        }\n    }\n}\n\nexport default Login;\n","import React from \"react\";\n\n\nfunction Home() {\n    return <h1>Home</h1>;\n}\n\nexport default Home;\n","import {Container, Jumbotron} from \"react-bootstrap\";\nimport React from \"react\";\nimport './styles.css';\n\nfunction QTJumbo(props) {\n    return (\n        <Jumbotron fluid className=\"my-jumbo\">\n            <Container>\n                <h1>{props.title}</h1>\n            </Container>\n        </Jumbotron>\n    );\n}\n\nexport default QTJumbo\n","import React from \"react\";\n\nfunction Dettaglio() {\n    return <h1>Dettaglio</h1>;\n}\n\nexport default Dettaglio;\n","import React from \"react\";\n\nfunction NuovaPartita() {\n    return <h1>NuovaPartita</h1>;\n}\n\nexport default NuovaPartita;\n","import React from \"react\";\n\nfunction ListaPartite() {\n    return <h1>ListaPartite</h1>;\n}\n\nexport default ListaPartite;\n","import React from \"react\";\nimport {Route, Redirect} from \"react-router-dom\";\nimport {useAuth} from \"../../contexts/auth\";\n\nfunction PrivateRoute({component: Component, ...rest}) {\n    const isAuthenticated = useAuth();\n    return (\n        <Route\n            {...rest}\n            render={\n                props =>\n                    isAuthenticated\n                        ? <Component {...props} />\n                        : <Redirect to=\"/login\"/>\n            }\n        />\n    );\n}\n\nexport default PrivateRoute;\n","import React, {useState} from 'react';\nimport Login from \"./pages/Login\";\nimport Home from \"./pages/Home\";\nimport QTJumbo from \"./components/QTJumbo/qt-jumbo\";\nimport {BrowserRouter as Router, Route, Link} from \"react-router-dom\";\nimport Dettaglio from \"./pages/Dettaglio\";\nimport NuovaPartita from \"./pages/NuovaPartita\";\nimport ListaPartite from \"./pages/ListaPartite\";\nimport PrivateRoute from \"./components/PrivateRoute\";\nimport {AuthContext} from \"./contexts/auth\";\n\nfunction App() {\n\n    const existingToken = JSON.parse(localStorage.getItem(\"token\"));\n    const [authToken, setAuthToken] = useState(existingToken);\n\n    const setToken = (data) => {\n        localStorage.setItem(\"token\", JSON.stringify(data));\n        setAuthToken(data);\n    };\n\n    return (\n        <AuthContext.Provider value={{ authToken, setAuthToken:setToken }}>\n            <Router>\n                <QTJumbo title=\"Quaderno Torneo\"/>\n                <div>\n                    <ul>\n                        <li>\n                            <Link to=\"/\">Home Page</Link>\n                        </li>\n                        <li>\n                            <Link to=\"/lista\">Partite</Link>\n                        </li>\n                    </ul>\n                    <Route exact path=\"/\" component={Home}/>\n                    <PrivateRoute path=\"/lista\" component={ListaPartite}/>\n                    <Route path=\"/login\" component={Login}/>\n                    <PrivateRoute path=\"/dettaglio\" component={Dettaglio}/>\n                    <PrivateRoute path=\"/inserisci\" component={NuovaPartita}/>\n                </div>\n            </Router>\n        </AuthContext.Provider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}