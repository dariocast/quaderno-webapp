{"version":3,"sources":["constants.js","login.js","App.js","serviceWorker.js","index.js"],"names":["BASEURL","CustomAlert","props","Alert","variant","type","onClose","dismissible","message","Utente","username","BottoneLogout","Button","onClick","Login","useState","utenteAutenticato","setUtenteAutenticato","localStorage","getItem","setUsername","password","setPassword","ricorda","setRicorda","show","setShow","setMessage","setType","Container","handleClose","Form","Group","controlId","Label","Control","autoComplete","name","onChange","handleChange","placeholder","value","required","Check","label","event","preventDefault","setItem","postCredential","sha1","then","data","a","fetch","method","headers","body","JSON","stringify","response","json","target","checked","App","className","Jumbotron","fluid","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.694741c1.chunk.js","sourcesContent":["export const BASEURL = 'https://dariocast.altervista.org/fantazama/api';\n","import React, {useState} from \"react\";\nimport './login.css';\nimport {Alert, Button, Container, Form} from \"react-bootstrap\";\nimport {BASEURL} from \"./constants\";\nimport sha1 from 'js-sha1'\n\nfunction Login() {\n    const [utenteAutenticato, setUtenteAutenticato] = useState(false);\n    const [username, setUsername] = useState(localStorage.getItem('u'));\n    const [password, setPassword] = useState(localStorage.getItem('p'));\n    const [ricorda, setRicorda] = useState(false);\n    const [show, setShow] = useState(false);\n    const [message, setMessage] = useState(\"\");\n    const [type, setType] = useState(\"\");\n\n    if (utenteAutenticato) {\n        return (\n            <Container>\n                {show ? <CustomAlert onClose={handleClose} type={type} message={message}/> : <></>}\n                <Utente username={username}/>\n                <BottoneLogout onClick={() => {\n                    setUtenteAutenticato(false);\n                    setUsername(localStorage.getItem('u'));\n                    setPassword(localStorage.getItem('p'));\n                    setRicorda(false);\n                }}/>\n            </Container>\n        );\n    } else {\n        return (\n            <Container>\n                {show ? <CustomAlert onClose={handleClose} type={type} message={message}/> : <></>}\n                <Form>\n                    <Form.Group controlId=\"formBasicUsername\">\n                        <Form.Label>Username</Form.Label>\n                        <Form.Control\n                            autoComplete=\"username\"\n                            name=\"username\"\n                            onChange={handleChange}\n                            type=\"text\"\n                            placeholder=\"Inserisci username\"\n                            value={username ? username : ''}\n                            required\n                        />\n                    </Form.Group>\n                    <Form.Group controlId=\"formBasicPassword\">\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control\n                            autoComplete=\"current-password\"\n                            name=\"password\"\n                            onChange={handleChange}\n                            type=\"password\"\n                            placeholder=\"Password\"\n                            value={password ? password : ''}\n                            required\n                        />\n                    </Form.Group>\n                    <Form.Group controlId=\"formBasicCheckbox\">\n                        <Form.Check\n                            name=\"ricorda\"\n                            onChange={handleChange}\n                            type=\"checkbox\"\n                            label=\"Ricordami\"\n                        />\n                    </Form.Group>\n                    <Button type=\"submit\" value=\"Submit\" variant=\"outline-primary\" onClick={handleLogin}>Login</Button>\n                </Form>\n            </Container>\n        );\n    }\n\n    function handleLogin(event) {\n        if (username && password) {\n            event.preventDefault();\n            if (ricorda) {\n                localStorage.setItem('u', username);\n                localStorage.setItem('p', password);\n            }\n\n            postCredential({\n                'username': username,\n                'password': sha1(password)\n            })\n                .then(data => {\n                    if(data.username) {\n                        setUtenteAutenticato(true);\n                        setUsername(data.username);\n                        setShow(true);\n                        setType(\"success\");\n                        setMessage('Accesso riuscito');\n                    } else {\n                        setShow(true);\n                        setType(\"danger\");\n                        setMessage('Accesso non riuscito, errore: '+data.message);\n                    }\n                });\n        }\n    }\n\n    function handleClose() {\n        setShow(false);\n    }\n\n    async function postCredential(data = {}) {\n        const response = await fetch(\n            BASEURL+\"/admin/auth.php\",\n            {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(data)\n            }\n        );\n        return response.json();\n    }\n\n    function handleChange(event) {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        switch (name) {\n            case 'username':\n                setUsername(value);\n                break;\n            case 'password':\n                setPassword(value);\n                break;\n            case 'ricorda':\n                setRicorda(value);\n                break;\n            default:\n                break;\n        }\n    }\n}\n\nfunction CustomAlert(props) {\n    return (\n        <Alert variant={props.type} onClose={props.onClose} dismissible>\n            {props.message}\n        </Alert>\n    );\n}\n\nfunction Utente(props) {\n    return <h4>Bentornato {props.username}!</h4>\n}\n\nfunction BottoneLogout(props) {\n    return <Button variant=\"danger\" onClick={props.onClick}>Logout</Button>\n}\n\nexport default Login;\n","import React from 'react';\nimport './App.css';\nimport Login from \"./login\";\nimport {Container, Jumbotron} from \"react-bootstrap\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Jumbotron fluid className=\"my-jumbo\">\n            <Container>\n                <h1>Benvenuto</h1>\n            </Container>\n        </Jumbotron>\n        <Login />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}